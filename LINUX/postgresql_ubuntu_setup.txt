------------------------------ PostgreSQL INSTALL and SETUP --------------------------------------

Install pgAdmin4:

Install public key for PgAdmin4 repository: curl -fsS https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /usr/share/keyrings/packages-pgadmin-org.gpg

Create the repository configuration file: sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/packages-pgadmin-org.gpg] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

Install pgAdmin4 on Ubuntu: sudo apt install pgadmin4 -y

Update Ubuntu: sudo apt update -y && sudo apt upgrade -y

---------------------------------------------------------------------------

Install PostgreSQL:

Download GPG key: sudo wget -qO /etc/apt/trusted.gpg.d/pgdg.asc https://www.postgresql.org/media/keys/ACCC4CF8.asc (need psw)

Add repository: echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -sc)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list

Update Ubuntu: sudo apt update -y && sudo apt upgrade -y

Install PostgreSQL  on Ubuntu: sudo apt install -y postgresql postgresql-contrib (need psw)

Check version: psql --version

The following command can be used to check if PostgreSQL service is running: sudo systemctl status postgresql

Ensure that the server is running using the systemctl start command: sudo systemctl start postgresql


--------------------------------- ALLOW REMOTE CONNECTIONS -------------------------------------------

Open postgresql.conf file in command line-based text editor with "nano": sudo nano /etc/postgresql/<version>/main/postgresql.conf 

Change line text: #listen_addresses = 'localhost' 
<TO> 
listen_addresses = '*' <-- this is for all connections, same as 0.0.0.0/0
listen_addresses = 'xxx.xxx.xxx.0/24' <-- this is for newtwork
listen_addresses = 'xxx.xxx.xxx.xxx4' <-- this is for single ip

Open pg_hba.conf file in command line-based text editor with "nano": sudo nano /etc/postgresql/<version>/main/pg_hba.conf
 
Change lines:
#####<FROM> # LOCALHOST ######### 
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   <db_name>       <username>      <ipaddress>            scram-sha-256
# IPv4 local connections: 
host    all             all             127.0.0.1/32            scram-sha-256
# IPv6 local connections:
host    all             all             ::1/128                 scram-sha-256

###### <TO> # ALLOW CONNECTION TO SPECIFIC IPs # /32 is used to specify a single IP address #
# IPv4 local connections: 
host    all     	all     	xxx.xxx.xxx.xxx/32      	scram-sha-256
host    all     	all     	xxx.xxx.xxx.xxx/32      	scram-sha-256
host    all     	all     	xxx.xxx.xxx.xxx/32      	scram-sha-256
# IPv6 local connections:
host    all             all     	::1/128			md5

###### <TO> # ALLOW CONNECTION TO ALL NETWORK # /24 represents a subnet mask that includes all IP addresses from xxx.xxx.xxx.1 to xxx.xxx.xxx.254 #
# IPv4 local connections: 
host    all     	all     	xxx.xxx.xxx.0/24       	scram-sha-256
# IPv6 local connections:
host    all             all     	::1/128            	scram-sha-256

###### <TO> # SAME ALLOW CONNECTION TO EVERYONE # NEED HARDCORE SCURITY ######
# IPv4 local connections: 
host    all     	all     	0.0.0.0/0       	trust
# IPv6 local connections:
host    all             all     	::/0             	trust

Open the port “5432” in the firewal: sudo ufw allow 5432

Confirm that the PostgreSQL server is running and listening on the specified IP address and port: netstat -tuln | grep 5432 

Restart server: sudo systemctl restart postgresql


------------------------ CONFIGURE FIREWALL FOR PORT 5432 --------------------------------

Open the port “5432” in the firewal: sudo ufw allow 5432

Add INPUT chain to allow incoming connections on port 5432: sudo iptables -A INPUT -p tcp --dport 5432 -j ACCEPT
Add a new rule to the specified chain: -A
Specify the protocol that the rule should match: -p
Specify the destination port for incoming network packets: --dport
Specify the target for the rule: -j

Save changes: sudo iptables-save | sudo tee /etc/iptables/rules.v4

Used to List the rules of INPUT chain of the iptables firewall, each rule specifies criteria for packets and defines what action should be taken on them (e.g., accept, drop, reject): sudo iptables -L INPUT -n
Option is used to list the rules in a specific firewall chain: -L
Display numeric values: -n
