---------------------------- DOCKER FILE FLASK SAMPLE ---------------------------

# Use the official Python 3.11 image as the base image
FROM python:3.11

# Expose port 5000 for incoming connections
EXPOSE 5000

# Set the working directory inside the container to /app
WORKDIR /app

# Copy the local requirements.txt file to the container
COPY ./requirements.txt requirements.txt

# Install the Python dependencies listed in requirements.txt
RUN pip install --no-cache-dir --upgrade -r requirements.txt

# Copy the entire local directory (including your Python application code) to the container:
# The first dot (.) on the left side of the arrow specifies the source directory on your local machine.
# The second dot (.) on the right side of the arrow specifies the destination directory inside the Docker container.
# ./mycodelocal/ on the left side of the arrow specifies the source directory on your local machine.
# ./mycodedocker/ on the right side of the arrow specifies the destination directory inside the Docker container.
COPY . . <OR> COPY ./mycodelocal/ ./mycodedocker/

# Define the command to run when the container starts
CMD ["flask", "run", "--host", "0.0.0.0"]

---------------------------- DOCKER FILE SPING BOOT SAMPLE ---------------------------

# Use a base image with the desired JDK version
FROM amazoncorretto:17-alpine

# Set the working directory inside the container
WORKDIR /api

# This line defines an argument named JAR_FILE with the default value of target/*.jar
# This allows you to pass the JAR file as a build argument when building the Docker image.
ARG JAR_FILE=target/*.jar

# Copy the JAR file into the container at /app
COPY ./target/oder-management-api-spring-1.0.jar /api/order-management-api-spring-1.0.jar

# Expose the port that your Spring Boot app is running on
EXPOSE 8080

# Specify the command to run your application
CMD ["java", "-jar", "order-management-api-spring-1.0.jar"]

------------------------------ DOCKER COMMANDS ---------------------------------

Create/Update docker image: docker build -t <repository>:<tag> <path_to_Dockerfile> -> Sample: docker build -t myusername/myapp:latest .

Start docker image: docker run -p <docker_port:port> --name <your-container-name> <your-image-name> -> SAMPLE: docker run -p 8080:8080 --name test_app sha256:49f95757c2ec

Start docker image in background: docker run -dp <docker_port:port> --name <your-container-name> <your-image-name> -> SAMPLE: docker run -dp 8080:8080 --name test_app sha256:49f95757c2ec

Start docker container: docker start -d <container-name> -> SAMPLE: docker start -d order-api

Check container status: docker ps

Registry URL: docker.io/<dockerimagename>:version -> SAMPLE docker.io/sha256:vcdfgaewfsad564awert5werw 

-------------------------------------------

Port forwarding: -p

Run as daemon in background: -d

