Connect via SSH: ssh <username>@<ip addr> SAMPLE --> ssh user@127.0.0.1

-----------------------------------################ DEFAULT #####################---------------------------------------

Connect to postgres <username>: psql -h <ipaddress> -U <username> -d <dbname>
host: -h
user: -U
database: -d

Connect to PostgreSQL as the PostgreSQL Superuser (postgres): sudo -u postgres psql

Connect to PostgreSQL as <username>: sudo -u <username> psql

---------------------------------------------------------------------------

The following command can be used to check if PostgreSQL service is running: sudo systemctl status postgresql

Ensure that the server is running using the systemctl start command: sudo systemctl start postgresql

Can also stop, start and restart the service:
sudo systemctl stop postgresql
sudo systemctl start postgresql
sudo systemctl restart postgresql
sudo systemctl enable postgresql
sudo systemctl status postgresql


----------------------################ CREATE/ALTER/DROP USER and DATABASE #################----------------------------

Switch over to the postgres account on your server by typing: sudo -i -u postgres

Set PostgreSQL command line interface in full admin mode: sudo -u postgres psql <OR> psql

# LOGIN/NOLOGIN priv determines whether or not a role can be used to connect from a client.
# By default CREATE ROLE has NOLOGIN and CREATE USER has LOGIN.

Create user: CREATE USER youruser WITH ENCRYPTED PASSWORD 'yourpass';

Create user: CREATE ROLE youruser WITH LOGIN PASSWORD ‘yourpass’;

Create user: CREATE ROLE youruser WITH PASSWORD ‘yourpass’;

Change username of <username>: ALTER ROLE <username> RENAME TO <new_username>;

Change password of <username>: ALTER USER <username> WITH PASSWORD 'new_password';


Create db: CREATE DATABASE yourdbname;

Create db with owner: CREATE DATABASE <databasename> OWNER <username>;

Change db owner: ALTER DATABASE <databasename> OWNER TO <new_owner>;


Create table with <tablename>: CREATE TABLE IF NOT EXISTS orders (ID INT GENERATED ALWAYS AS IDENTITY, name VARCHAR(100));

Change table <tablename>: ALTER TABLE <tablename> RENAME TO <newtablename>;


Delete(DROP) table/tables: DROP TABLE <tablename>; <OR> DROP TABLE <tablename_1>, <tablename_2>, ..., <tablename_10>;

Delete(DROP) user/users: DROP USER <username>; <OR> DROP USER <username_1>, <username_2>, ..., <username_10>;

Delete(DROP) database: DROP DATABASE IF EXISTS db_name;


-------------------------################ WORK IN PostgreSQL PANEL ##############---------------------------

# Move around and edit PostgreSQL admin mode '<db_name>=#' or '<username>@<db_name>=#':

Connect to PostgreSQL as the PostgreSQL Superuser (postgres): sudo -u postgres psql

Connect to a specific user's default database: psql -U <username>

Connect to a PostgreSQL specific Username with a specific Database: psql -U <username> -d <db_name> -W

Switch to another user: \c <username>

Switch to another db: \c <dbname>

Switch to another user and db: \c <dbname> <username>

Change password for <username>: \password <username>

List all databases: \l

List database tables: \dt

See the table's structure: \d <tablename> <OR> \d+ <tablename>

List all schemas: \dn

List users and their roles: \du

Retrieve a specific user: \du <username>

List all functions: \df

Exit the interactive Postgres session: \q

---------------------------------------------------------------------------

Check conn info: SELECT current_database(), current_user;


---------------------- CHANGE USER TO SUPERUSER ----------------------------

Change <username> to SUPERUSER: ALTER USER <username> WITH SUPERUSER;

Remove SUPERUSER from <username>: ALTER USER <username> WITH NOSUPERUSER;


---------------------- PRIVILEGES ON SCHEMA TO PostgreSQL USER ----------------------------

Grants the ability to access objects within a schema: GRANT USAGE ON SCHEMA schema_name TO username;

Allows the creation of new objects (tables, views, functions, etc.) within a schema: GRANT CREATE ON SCHEMA schema_name TO username;

Grants the ability to alter existing objects within a schema (e.g., ALTER TABLE): GRANT ALTER ON SCHEMA schema_name TO username;

Allows the deletion of objects within a schema (e.g., DROP TABLE): GRANT DROP ON SCHEMA schema_name TO username;

Grants all the above privileges in one statement: GRANT USAGE, CREATE, ALTER, DROP ON SCHEMA schema_name TO username;

Grants all the privileges to all tables: GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO your_user;

To remove privileges just change GRANT to REVOKE and TO to FROM.


---------------------- PRIVILEGES ON TABLE TO PostgreSQL USER ----------------------------

The SELECT privilege allows the user to retrieve data from the table: GRANT INSERT ON table_name TO username;

The INSERT privilege allows the user to add new rows (insert data) into the table: GRANT UPDATE ON table_name TO username;

The UPDATE privilege allows the user to modify existing rows in the table: GRANT UPDATE ON table_name TO username;

The DELETE privilege allows the user to remove rows from the table: GRANT DELETE ON table_name TO username;

The TRUNCATE privilege allows the user to truncate (remove all rows from) the table: GRANT TRUNCATE ON table_name TO username;

The REFERENCES privilege allows the user to create foreign key constraints that reference this table: GRANT REFERENCES ON table_name TO username;

The TRIGGER privilege allows the user to create triggers on this table: GRANT TRIGGER ON table_name TO username;

The USAGE privilege allows the user to see and access the table's schema and metadata, even if they don't have other specific privileges on the table itself: GRANT USAGE ON table_name TO username;

To remove privileges just change GRANT to REVOKE and TO to FROM.

List table privileges for a specific user on a specific table (replace 'username' and 'table_name' with actual values):
SELECT grantee, privilege_type
FROM information_schema.table_privileges
WHERE grantee = 'username' AND table_name = 'table_name';

SELECT grantee, table_name, privilege_type
FROM information_schema.table_privileges
WHERE grantee = 'testuser' AND table_schema = 'public';

SELECT grantee, table_name, privilege_type
FROM information_schema.table_privileges
WHERE grantee = 'testuser';


---------------------- ALL PRIVILEGES ON DB TO PostgreSQL USER ----------------------------

Grant all privileges on a database named "db_name" to a user named "username": GRANT ALL PRIVILEGES ON DATABASE db_name TO username;

Revoke all privileges on a database named "db_name" to a user named "username":REVOKE ALL PRIVILEGES ON DATABASE db_name FROM username;

Grant all privileges on schema: GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA schema_name TO username;

Revoke all privileges on schema: REVOKE ALL ON SCHEMA public FROM public;



