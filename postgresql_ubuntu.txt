------------------------ (c) Vytautas Matukynas --------------------------

----------------------------------- DEFAULT ---------------------------------------

Connect to postgres <username>: psql -h <ipaddress> -U <username> -d <dbname>
host: -h
user: -U
database: -d

The following command can be used to check if PostgreSQL service is running: sudo systemctl status postgresql

Ensure that the server is running using the systemctl start command: sudo systemctl start postgresql.service

We can also stop, start and restart the service:
sudo systemctl stop postgresql
sudo systemctl start postgresql
sudo systemctl restart postgresql

Define name of the new role and also ask whether it should have superuser permissions: --interactive

Check for more options to createuser: man createuser

---------------------------------------------------------------------------

# Create user/db and edit user/db by using sudo on current <username>
Creating user: sudo -u postgres createuser --interactive
Output Sample:
Enter name of role to add: sample_user
Shall the new role be a superuser? (y/n) y

Creating Database: sudo -u postgres createdb <dbname>

Change pasword of user: sudo -u postgres psql -c "ALTER USER <username> PASSWORD '<new-password>';"

Select user: sudo -u postgres psql -c "SELECT <new-password>;"

Pass a single SQL command: -c

Specifies the target user "<username>": -u <username>

---------------------------------------------------------------------------

# Create user/db and edit user/db by switching to postgres account
Switch over to the postgres account on your server by typing: sudo -i -u postgres
Using woth sudo this is LOGIN: -i
Specifies the target user "postgres": -u postgres

<<username> account> Set PostgreSQL command line interface in full admin mode: psql

<<username> account> Create user: createuser --interactive

<<username> account> Create db: createdb <dbname>

---------------------------------------------------------------------------

# Create user/db and edit user/db by using psql admin

Creating user: sudo -u postgres createuser <username>

Set PostgreSQL command line interface in full admin mode: sudo -u postgres psql

<psql admin> Create db: postgres=# create database <db_name>;

<psql admin> Giving the user a password: psql=# alter user <username> with encrypted password '<password>';

<psql admin> Granting privileges on database: psql=# grant all privileges on database <dbname> to <username>;

---------------------------------------------------------------------------

# Move around and edit PostgreSQL admin mode '<username>=#':

Set PostgreSQL command line interface in full admin mode: sudo -u postgres psql

Connect to admin mode: psql -d <db-name> -U <username> -W

Show conn info: \conninfo

Switch to another user: \c - <username>

Switch to another db: \c - <dbname>

Switch to another user and db: \c <dbname> <username>

Change password for <username>: \password <username>

List all databases: \l

List database tables: \dt

See the table's structure: \d <tablename> <OR> \d+ <tablename>

List all schemas: \dn

List users and their roles: \du

Retrieve a specific user: \du <username>

List all functions: \df

Exit the interactive Postgres session: \q

---------------------------------------------------------------------------

Delete(DROP) user/users: DROP USER <username>; <OR> DROP USER <username_1>, <username_1>, ..., <username_10>;

Change <username> to SUPERUSER: ALTER USER <username> WITH SUPERUSER;

Remove SUPERUSER from <username>: ALTER USER <username> WITH NOSUPERUSER;

Channge username of <username>: ALTER ROLE <username> RENAME TO <new_username>;

------------------------------ PostgreSQL INSTALL and SETUP --------------------------------------

Install pgAdmin4:

Install required packages: sudo apt-get install build-essential libssl-dev libffi-dev libgmp3-dev virtualenv python-pip libpq-dev python-dev

Install the public key for the PgAdmin4 repository: curl -fsS https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /usr/share/keyrings/packages-pgadmin-org.gpg

Create the repository configuration file: sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/packages-pgadmin-org.gpg] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

Install pgAdmin4 on Ubuntu: sudo apt install pgadmin4

Update Ubuntu: sudo apt update && sudo apt upgrade

---------------------------------------------------------------------------

Install PostgreSQL:

Download GPG key: sudo wget -qO /etc/apt/trusted.gpg.d/pgdg.asc https://www.postgresql.org/media/keys/ACCC4CF8.asc

Add repository: echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -sc)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list

Update Ubuntu: sudo apt update && sudo apt upgrade

Install PostgreSQL  on Ubuntu: sudo apt install -y postgresql postgresql-contrib

Check version: psql --version

The following command can be used to check if PostgreSQL service is running: sudo systemctl status postgresql

Ensure that the server is running using the systemctl start command: sudo systemctl start postgresql.service

---------------------------------------------------------------------------

Setup PostgreSQL user and server:

Creating user: sudo -u postgres createuser <username>

Creating Database: sudo -u postgres createdb <dbname>

Set PostgreSQL command line interface in full admin mode: sudo -u postgres psql

Giving the user a password: psql=# alter user <username> with encrypted password '<password>';

Granting privileges on database: psql=# grant all privileges on database <dbname> to <username>;

--------------------------------- ALLOW REMOTE CONNECTIONS -------------------------------------------

Open postgresql.conf file in command line-based text editor with "nano": sudo nano /etc/postgresql/<version>/main/postgresql.conf 

Change line text: #listen_addresses = 'localhost' <TO> listen_addresses = '*'

Open pg_hba.conf file in command line-based text editor with "nano": sudo nano /etc/postgresql/<version>/main/pg_hba.conf
 
Change lines:
<FROM> # LOCALHOST #
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   <db_name>       <username>      <ipaddress>            md5
# IPv4 local connections: 
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 md5
<TO> # SAME NETWORK HOST #
# IPv4 local connections: 
host    all     	all     	0.0.0.0/0       	md5
# IPv6 local connections:
host    all             all     	:/0             	md5

Open the port “5432” in the firewal: sudo ufw allow 5432

Confirm that the PostgreSQL server is running and listening on the specified IP address and port: netstat -tuln | grep 5432 

Restart server: sudo systemctl restart postgresql

---------------------------------------------------------------------------

INPUT chain of the iptables firewall: sudo iptables -L INPUT -n
Option is used to list the rules in a specific firewall chain: -L
Display numeric values: -n

Add INPUT chain to allow incoming connections on port 5432: sudo iptables -A INPUT -p tcp --dport 5432 -j ACCEPT
Add a new rule to the specified chain: -A
Specify the protocol that the rule should match: -p
Specify the target for the rule: -j
Specify the destination port for incoming network packets: --dport

Save changes: sudo iptables-save | sudo tee /etc/iptables/rules.v4









